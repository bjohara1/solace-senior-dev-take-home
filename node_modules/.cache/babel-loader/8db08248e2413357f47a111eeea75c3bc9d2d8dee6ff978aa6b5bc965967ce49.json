{"ast":null,"code":"import{useCallback}from'react';export const useASR=()=>{const transcribe=useCallback(async audioBlob=>{try{// Convert audio blob to FormData for API upload\nconst formData=new FormData();formData.append('file',audioBlob,'audio.webm');formData.append('model','whisper-1');formData.append('language','en');const response=await fetch('/api/transcribe',{method:'POST',body:formData});if(!response.ok){throw new Error(`Transcription failed: ${response.statusText}`);}const result=await response.json();return result.text||null;}catch(error){console.error('ASR Error:',error);// Fallback: return a mock transcript for demo purposes\nif(process.env.NODE_ENV==='development'){console.log('Using mock transcript for demo');return'Hello, how are you feeling today?';}throw error;}},[]);return{transcribe};};","map":{"version":3,"names":["useCallback","useASR","transcribe","audioBlob","formData","FormData","append","response","fetch","method","body","ok","Error","statusText","result","json","text","error","console","process","env","NODE_ENV","log"],"sources":["/Users/bradohara/solace/solace/task-C/src/hooks/useASR.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nexport const useASR = () => {\n  const transcribe = useCallback(async (audioBlob: Blob): Promise<string | null> => {\n    try {\n      // Convert audio blob to FormData for API upload\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'audio.webm');\n      formData.append('model', 'whisper-1');\n      formData.append('language', 'en');\n\n      const response = await fetch('/api/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Transcription failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.text || null;\n\n    } catch (error) {\n      console.error('ASR Error:', error);\n      \n      // Fallback: return a mock transcript for demo purposes\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Using mock transcript for demo');\n        return 'Hello, how are you feeling today?';\n      }\n      \n      throw error;\n    }\n  }, []);\n\n  return { transcribe };\n}; "],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CAEnC,MAAO,MAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,UAAU,CAAGF,WAAW,CAAC,KAAO,CAAAG,SAAe,EAA6B,CAChF,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,SAAS,CAAE,YAAY,CAAC,CAChDC,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAE,WAAW,CAAC,CACrCF,QAAQ,CAACE,MAAM,CAAC,UAAU,CAAE,IAAI,CAAC,CAEjC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iBAAiB,CAAE,CAC9CC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACR,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC,CACjE,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACpC,MAAO,CAAAD,MAAM,CAACE,IAAI,EAAI,IAAI,CAE5B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAElC;AACA,GAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAAE,CAC1CH,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC,CAC7C,MAAO,mCAAmC,CAC5C,CAEA,KAAM,CAAAL,KAAK,CACb,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEf,UAAW,CAAC,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}