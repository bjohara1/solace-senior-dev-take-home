{"ast":null,"code":"import{useCallback}from'react';export const useMemory=()=>{const saveTranscript=useCallback(async transcript=>{try{// Get existing transcripts\nconst existing=localStorage.getItem('solace_transcripts');const transcripts=existing?JSON.parse(existing):[];// Add new transcript with timestamp\nconst newTranscript={text:transcript,timestamp:new Date().toISOString(),id:Date.now().toString()};// Keep only last 3 transcripts\nconst updatedTranscripts=[...transcripts,newTranscript].slice(-3);// Store in localStorage (in a real app, this would be encrypted)\nlocalStorage.setItem('solace_transcripts',JSON.stringify(updatedTranscripts));}catch(error){console.error('Error saving transcript:',error);}},[]);const getTranscripts=useCallback(()=>{try{const existing=localStorage.getItem('solace_transcripts');if(!existing)return[];const transcripts=JSON.parse(existing);return transcripts.map(t=>t.text);}catch(error){console.error('Error retrieving transcripts:',error);return[];}},[]);const clearTranscripts=useCallback(()=>{try{localStorage.removeItem('solace_transcripts');}catch(error){console.error('Error clearing transcripts:',error);}},[]);return{saveTranscript,getTranscripts,clearTranscripts};};","map":{"version":3,"names":["useCallback","useMemory","saveTranscript","transcript","existing","localStorage","getItem","transcripts","JSON","parse","newTranscript","text","timestamp","Date","toISOString","id","now","toString","updatedTranscripts","slice","setItem","stringify","error","console","getTranscripts","map","t","clearTranscripts","removeItem"],"sources":["/Users/bradohara/solace/solace/task-C/src/hooks/useMemory.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nexport const useMemory = () => {\n  const saveTranscript = useCallback(async (transcript: string): Promise<void> => {\n    try {\n      // Get existing transcripts\n      const existing = localStorage.getItem('solace_transcripts');\n      const transcripts = existing ? JSON.parse(existing) : [];\n      \n      // Add new transcript with timestamp\n      const newTranscript = {\n        text: transcript,\n        timestamp: new Date().toISOString(),\n        id: Date.now().toString()\n      };\n      \n      // Keep only last 3 transcripts\n      const updatedTranscripts = [...transcripts, newTranscript].slice(-3);\n      \n      // Store in localStorage (in a real app, this would be encrypted)\n      localStorage.setItem('solace_transcripts', JSON.stringify(updatedTranscripts));\n      \n    } catch (error) {\n      console.error('Error saving transcript:', error);\n    }\n  }, []);\n\n  const getTranscripts = useCallback((): string[] => {\n    try {\n      const existing = localStorage.getItem('solace_transcripts');\n      if (!existing) return [];\n      \n      const transcripts = JSON.parse(existing);\n      return transcripts.map((t: any) => t.text);\n      \n    } catch (error) {\n      console.error('Error retrieving transcripts:', error);\n      return [];\n    }\n  }, []);\n\n  const clearTranscripts = useCallback((): void => {\n    try {\n      localStorage.removeItem('solace_transcripts');\n    } catch (error) {\n      console.error('Error clearing transcripts:', error);\n    }\n  }, []);\n\n  return {\n    saveTranscript,\n    getTranscripts,\n    clearTranscripts\n  };\n}; "],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CAEnC,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,cAAc,CAAGF,WAAW,CAAC,KAAO,CAAAG,UAAkB,EAAoB,CAC9E,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAC3D,KAAM,CAAAC,WAAW,CAAGH,QAAQ,CAAGI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CAAG,EAAE,CAExD;AACA,KAAM,CAAAM,aAAa,CAAG,CACpBC,IAAI,CAAER,UAAU,CAChBS,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,EAAE,CAAEF,IAAI,CAACG,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAC,kBAAkB,CAAG,CAAC,GAAGX,WAAW,CAAEG,aAAa,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC,CAEpE;AACAd,YAAY,CAACe,OAAO,CAAC,oBAAoB,CAAEZ,IAAI,CAACa,SAAS,CAACH,kBAAkB,CAAC,CAAC,CAEhF,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,cAAc,CAAGxB,WAAW,CAAC,IAAgB,CACjD,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAC3D,GAAI,CAACF,QAAQ,CAAE,MAAO,EAAE,CAExB,KAAM,CAAAG,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CACxC,MAAO,CAAAG,WAAW,CAACkB,GAAG,CAAEC,CAAM,EAAKA,CAAC,CAACf,IAAI,CAAC,CAE5C,CAAE,MAAOW,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,EAAE,CACX,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,gBAAgB,CAAG3B,WAAW,CAAC,IAAY,CAC/C,GAAI,CACFK,YAAY,CAACuB,UAAU,CAAC,oBAAoB,CAAC,CAC/C,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLpB,cAAc,CACdsB,cAAc,CACdG,gBACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}