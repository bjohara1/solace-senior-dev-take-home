{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport const useMemory = () => {\n  _s();\n  const saveTranscript = useCallback(async transcript => {\n    try {\n      // Get existing transcripts\n      const existing = localStorage.getItem('solace_transcripts');\n      const transcripts = existing ? JSON.parse(existing) : [];\n\n      // Add new transcript with timestamp\n      const newTranscript = {\n        text: transcript,\n        timestamp: new Date().toISOString(),\n        id: Date.now().toString()\n      };\n\n      // Keep only last 3 transcripts\n      const updatedTranscripts = [...transcripts, newTranscript].slice(-3);\n\n      // Store in localStorage (in a real app, this would be encrypted)\n      localStorage.setItem('solace_transcripts', JSON.stringify(updatedTranscripts));\n    } catch (error) {\n      console.error('Error saving transcript:', error);\n    }\n  }, []);\n  const getTranscripts = useCallback(() => {\n    try {\n      const existing = localStorage.getItem('solace_transcripts');\n      if (!existing) return [];\n      const transcripts = JSON.parse(existing);\n      return transcripts.map(t => t.text);\n    } catch (error) {\n      console.error('Error retrieving transcripts:', error);\n      return [];\n    }\n  }, []);\n  const clearTranscripts = useCallback(() => {\n    try {\n      localStorage.removeItem('solace_transcripts');\n    } catch (error) {\n      console.error('Error clearing transcripts:', error);\n    }\n  }, []);\n  return {\n    saveTranscript,\n    getTranscripts,\n    clearTranscripts\n  };\n};\n_s(useMemory, \"yYA96PxxQyDZBsbzfIY+RZXZEzQ=\");","map":{"version":3,"names":["useCallback","useMemory","_s","saveTranscript","transcript","existing","localStorage","getItem","transcripts","JSON","parse","newTranscript","text","timestamp","Date","toISOString","id","now","toString","updatedTranscripts","slice","setItem","stringify","error","console","getTranscripts","map","t","clearTranscripts","removeItem"],"sources":["/Users/bradohara/solace/solace/task-C/src/hooks/useMemory.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nexport const useMemory = () => {\n  const saveTranscript = useCallback(async (transcript: string): Promise<void> => {\n    try {\n      // Get existing transcripts\n      const existing = localStorage.getItem('solace_transcripts');\n      const transcripts = existing ? JSON.parse(existing) : [];\n      \n      // Add new transcript with timestamp\n      const newTranscript = {\n        text: transcript,\n        timestamp: new Date().toISOString(),\n        id: Date.now().toString()\n      };\n      \n      // Keep only last 3 transcripts\n      const updatedTranscripts = [...transcripts, newTranscript].slice(-3);\n      \n      // Store in localStorage (in a real app, this would be encrypted)\n      localStorage.setItem('solace_transcripts', JSON.stringify(updatedTranscripts));\n      \n    } catch (error) {\n      console.error('Error saving transcript:', error);\n    }\n  }, []);\n\n  const getTranscripts = useCallback((): string[] => {\n    try {\n      const existing = localStorage.getItem('solace_transcripts');\n      if (!existing) return [];\n      \n      const transcripts = JSON.parse(existing);\n      return transcripts.map((t: any) => t.text);\n      \n    } catch (error) {\n      console.error('Error retrieving transcripts:', error);\n      return [];\n    }\n  }, []);\n\n  const clearTranscripts = useCallback((): void => {\n    try {\n      localStorage.removeItem('solace_transcripts');\n    } catch (error) {\n      console.error('Error clearing transcripts:', error);\n    }\n  }, []);\n\n  return {\n    saveTranscript,\n    getTranscripts,\n    clearTranscripts\n  };\n}; "],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,cAAc,GAAGH,WAAW,CAAC,MAAOI,UAAkB,IAAoB;IAC9E,IAAI;MACF;MACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;MAC3D,MAAMC,WAAW,GAAGH,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,GAAG,EAAE;;MAExD;MACA,MAAMM,aAAa,GAAG;QACpBC,IAAI,EAAER,UAAU;QAChBS,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,EAAE,EAAEF,IAAI,CAACG,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;MAC1B,CAAC;;MAED;MACA,MAAMC,kBAAkB,GAAG,CAAC,GAAGX,WAAW,EAAEG,aAAa,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;;MAEpE;MACAd,YAAY,CAACe,OAAO,CAAC,oBAAoB,EAAEZ,IAAI,CAACa,SAAS,CAACH,kBAAkB,CAAC,CAAC;IAEhF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAGzB,WAAW,CAAC,MAAgB;IACjD,IAAI;MACF,MAAMK,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;MAC3D,IAAI,CAACF,QAAQ,EAAE,OAAO,EAAE;MAExB,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;MACxC,OAAOG,WAAW,CAACkB,GAAG,CAAEC,CAAM,IAAKA,CAAC,CAACf,IAAI,CAAC;IAE5C,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACX;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,gBAAgB,GAAG5B,WAAW,CAAC,MAAY;IAC/C,IAAI;MACFM,YAAY,CAACuB,UAAU,CAAC,oBAAoB,CAAC;IAC/C,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLpB,cAAc;IACdsB,cAAc;IACdG;EACF,CAAC;AACH,CAAC;AAAC1B,EAAA,CApDWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}