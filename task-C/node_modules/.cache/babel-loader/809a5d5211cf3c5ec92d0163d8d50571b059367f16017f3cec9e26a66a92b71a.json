{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport const useASR = () => {\n  _s();\n  const transcribe = useCallback(async audioBlob => {\n    try {\n      // Convert audio blob to FormData for API upload\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'audio.webm');\n      formData.append('model', 'whisper-1');\n      formData.append('language', 'en');\n      const response = await fetch('/api/transcribe', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Transcription failed: ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result.text || null;\n    } catch (error) {\n      console.error('ASR Error:', error);\n\n      // Fallback: return a mock transcript for demo purposes\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Using mock transcript for demo');\n        return 'Hello, how are you feeling today?';\n      }\n      throw error;\n    }\n  }, []);\n  return {\n    transcribe\n  };\n};\n_s(useASR, \"uM0hdYT4UAsDC4mqje6/IlMO7nE=\");","map":{"version":3,"names":["useCallback","useASR","_s","transcribe","audioBlob","formData","FormData","append","response","fetch","method","body","ok","Error","statusText","result","json","text","error","console","process","env","NODE_ENV","log"],"sources":["/Users/bradohara/solace/solace/task-C/src/hooks/useASR.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nexport const useASR = () => {\n  const transcribe = useCallback(async (audioBlob: Blob): Promise<string | null> => {\n    try {\n      // Convert audio blob to FormData for API upload\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'audio.webm');\n      formData.append('model', 'whisper-1');\n      formData.append('language', 'en');\n\n      const response = await fetch('/api/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Transcription failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.text || null;\n\n    } catch (error) {\n      console.error('ASR Error:', error);\n      \n      // Fallback: return a mock transcript for demo purposes\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Using mock transcript for demo');\n        return 'Hello, how are you feeling today?';\n      }\n      \n      throw error;\n    }\n  }, []);\n\n  return { transcribe };\n}; "],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,UAAU,GAAGH,WAAW,CAAC,MAAOI,SAAe,IAA6B;IAChF,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,EAAE,YAAY,CAAC;MAChDC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC;MACrCF,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;MAEjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACjE;MAEA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpC,OAAOD,MAAM,CAACE,IAAI,IAAI,IAAI;IAE5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;;MAElC;MACA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CH,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC;QAC7C,OAAO,mCAAmC;MAC5C;MAEA,MAAML,KAAK;IACb;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEf;EAAW,CAAC;AACvB,CAAC;AAACD,EAAA,CAnCWD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}