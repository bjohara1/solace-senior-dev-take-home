{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport const useTTS = () => {\n  _s();\n  const synthesize = useCallback(async (text, settings) => {\n    try {\n      const response = await fetch('/api/synthesize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text,\n          voice: settings.voice,\n          speed: settings.speed,\n          pitch: settings.pitch\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`TTS failed: ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result.audioUrl || null;\n    } catch (error) {\n      console.error('TTS Error:', error);\n\n      // For demo purposes, we'll use the browser's built-in speech synthesis\n      if ('speechSynthesis' in window) {\n        return new Promise(resolve => {\n          const utterance = new SpeechSynthesisUtterance(text);\n          utterance.voice = speechSynthesis.getVoices().find(voice => voice.name.includes(settings.voice === 'male' ? 'Male' : 'Female')) || null;\n          utterance.rate = settings.speed;\n          utterance.pitch = settings.pitch;\n          utterance.onend = () => resolve(null);\n          utterance.onerror = () => resolve(null);\n          speechSynthesis.speak(utterance);\n          resolve(null);\n        });\n      }\n      return null;\n    }\n  }, []);\n  return {\n    synthesize\n  };\n};\n_s(useTTS, \"sDwVZOpchAEWhFdceUSoBlPVonA=\");","map":{"version":3,"names":["useCallback","useTTS","_s","synthesize","text","settings","response","fetch","method","headers","body","JSON","stringify","voice","speed","pitch","ok","Error","statusText","result","json","audioUrl","error","console","window","Promise","resolve","utterance","SpeechSynthesisUtterance","speechSynthesis","getVoices","find","name","includes","rate","onend","onerror","speak"],"sources":["/Users/bradohara/solace/solace/task-C/src/hooks/useTTS.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { VoiceSettings } from '../App';\n\nexport const useTTS = () => {\n  const synthesize = useCallback(async (\n    text: string, \n    settings: VoiceSettings\n  ): Promise<string | null> => {\n    try {\n      const response = await fetch('/api/synthesize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text,\n          voice: settings.voice,\n          speed: settings.speed,\n          pitch: settings.pitch\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`TTS failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.audioUrl || null;\n\n    } catch (error) {\n      console.error('TTS Error:', error);\n      \n      // For demo purposes, we'll use the browser's built-in speech synthesis\n      if ('speechSynthesis' in window) {\n        return new Promise((resolve) => {\n          const utterance = new SpeechSynthesisUtterance(text);\n          utterance.voice = speechSynthesis.getVoices().find(\n            voice => voice.name.includes(settings.voice === 'male' ? 'Male' : 'Female')\n          ) || null;\n          utterance.rate = settings.speed;\n          utterance.pitch = settings.pitch;\n          \n          utterance.onend = () => resolve(null);\n          utterance.onerror = () => resolve(null);\n          \n          speechSynthesis.speak(utterance);\n          resolve(null);\n        });\n      }\n      \n      return null;\n    }\n  }, []);\n\n  return { synthesize };\n}; "],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,UAAU,GAAGH,WAAW,CAAC,OAC7BI,IAAY,EACZC,QAAuB,KACI;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBR,IAAI;UACJS,KAAK,EAAER,QAAQ,CAACQ,KAAK;UACrBC,KAAK,EAAET,QAAQ,CAACS,KAAK;UACrBC,KAAK,EAAEV,QAAQ,CAACU;QAClB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAeX,QAAQ,CAACY,UAAU,EAAE,CAAC;MACvD;MAEA,MAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACpC,OAAOD,MAAM,CAACE,QAAQ,IAAI,IAAI;IAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;;MAElC;MACA,IAAI,iBAAiB,IAAIE,MAAM,EAAE;QAC/B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;UAC9B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACxB,IAAI,CAAC;UACpDuB,SAAS,CAACd,KAAK,GAAGgB,eAAe,CAACC,SAAS,CAAC,CAAC,CAACC,IAAI,CAChDlB,KAAK,IAAIA,KAAK,CAACmB,IAAI,CAACC,QAAQ,CAAC5B,QAAQ,CAACQ,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,QAAQ,CAC5E,CAAC,IAAI,IAAI;UACTc,SAAS,CAACO,IAAI,GAAG7B,QAAQ,CAACS,KAAK;UAC/Ba,SAAS,CAACZ,KAAK,GAAGV,QAAQ,CAACU,KAAK;UAEhCY,SAAS,CAACQ,KAAK,GAAG,MAAMT,OAAO,CAAC,IAAI,CAAC;UACrCC,SAAS,CAACS,OAAO,GAAG,MAAMV,OAAO,CAAC,IAAI,CAAC;UAEvCG,eAAe,CAACQ,KAAK,CAACV,SAAS,CAAC;UAChCD,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACJ;MAEA,OAAO,IAAI;IACb;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEvB;EAAW,CAAC;AACvB,CAAC;AAACD,EAAA,CApDWD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}